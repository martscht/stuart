for (i in seq_along(parlabs)) {
model_a <- gsub(parlabs[i], parlabs_a[i], model_a)
}
parlabs
model_a
parlabs_a
model_a
model
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
parlabs_a
vali <- crossvalidate(sel, held)
equality
grep('by\s.+\s(lam', model)
grep('by\\s.+\\s(lam', model)
grep('by\\s.+\\s\\(lam', model)
model[grep('by\\s.+\\s\\(lam', model)]
model[grep('by\\s.+\\s\\(lam', model)] <- gsub(' \\(lam', '@1 \\(lam', model[grep('by\\s.+\\s\\(lam', model)])
model <- paste(gsub("\\(.+\\)", "", model), collapse = '\n')
model
gsub('A\\)', 'B\\)', model_a)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
model_a
parlabs
parlabs_a
model
model_a
parlabs[i]
gsub('\\)', '\\\\)', parlabs)
gsub('\\(.+\\)', '\\\\(.+\\\\)', parlabs)
tmp_labs <- gsub('\\(', '\\\\(', parlabs)
tmp_labs <- gsub('\\)', '\\\\)', parlabs)
tmp_labs
tmp_labs <- gsub('\\(', '\\\\(', parlabs)
tmp_labs <- gsub('\\)', '\\\\)', tmp_labs)
tmp_labs
model_a <- gsub(parlabs[i], parlabs_a[i], model_a)
model_a
model_a <- paste(model, collapse = '\n')
tmp_labs <- gsub('\\(', '\\\\(', parlabs)
tmp_labs <- gsub('\\)', '\\\\)', tmp_labs)
model_a <- gsub(parlabs[i], parlabs_a[i], model_a)
model_a
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
model_a
model_a
model_b
model_a
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
model_a
model
?MplusAutomation::writeModel
vali <- crossvalidate(sel, held)
model
model
model <- paste(model, 'Model A: \n', model_a, 'Model B: \n', model_b, sep = '\n')
model
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
output
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
filename
filename
filename
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
output
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
output
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
output
vali <- crossvalidate(sel, held)
output
output
output
load_all('~/stuart/stuart')
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
output
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
output
vali <- crossvalidate(sel, held)
output
vali <- crossvalidate(sel, held)
output
fs
library(devtools)
load_all('~/stuart/stuart')
data(fairplayer)
set.seed(35355)
# fairplayer$g <- sample(c('A', 'B'), nrow(fairplayer), TRUE)
#
# table(fairplayer$g)
held <- holdout(fairplayer)
fs <- list(si1 = names(fairplayer)[83:92],
si2 = names(fairplayer)[93:102],
si3 = names(fairplayer)[103:112])
repe <- list(si = c('si1', 'si2', 'si3'))
sel <- gene(held, fs, 3, repeated.measures = repe, software = 'Mplus')
vali <- crossvalidate(sel, held)
output
output
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
results
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
results
results
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
results
models
results
load_all('~/stuart/stuart')
fs
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
library(devtools)
load_all('~/stuart/stuart')
data(fairplayer)
set.seed(35355)
# fairplayer$g <- sample(c('A', 'B'), nrow(fairplayer), TRUE)
#
# table(fairplayer$g)
held <- holdout(fairplayer)
fs <- list(si1 = names(fairplayer)[83:92],
si2 = names(fairplayer)[93:102],
si3 = names(fairplayer)[103:112])
repe <- list(si = c('si1', 'si2', 'si3'))
sel <- gene(held, fs, 3, repeated.measures = repe, software = 'Mplus')
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
sel <- gene(held, fs, 3, repeated.measures = repe)
vali <- crossvalidate(sel, held)
names(results)
comps
rownames(comps) <- names(models)
vali <- crossvalidate(sel, held)
names(models)
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
results
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali
sel <- gene(held, fs, 3, repeated.measures = repe, software = 'Mplus')
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
results
m0
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
results
vali <- crossvalidate(sel, held)
m0
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
vali <- crossvalidate(sel, held)
results
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
results
results
results
results
vali <- crossvalidate(sel, held)
load_all('~/stuart/stuart')
vali <- crossvalidate(sel, held)
sel_lav <- gene(held, fs, 3, repeated.measures = repe)
sel_mpl <- gene(held, fs, 3, repeated.measures = repe, software = 'Mplus')
repe <- list(si = c('si1', 'si2', 'si3'))
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe)
sel_mpl <- bruteforce(held, fs, 3, repeated.measures = repe, software = 'Mplus')
crossvalidate(sel_lav, held)
crossvalidate(sel_lav, held)
crossvalidate(sel_mpl, held)
crossvalidate(sel_lav, held)
output
library(devtools)
load_all('~/stuart/stuart')
data(fairplayer)
set.seed(35355)
# fairplayer$g <- sample(c('A', 'B'), nrow(fairplayer), TRUE)
#
# table(fairplayer$g)
held <- holdout(fairplayer)
fs <- list(si1 = names(fairplayer)[83:92],
si2 = names(fairplayer)[93:102],
si3 = names(fairplayer)[103:112])
repe <- list(si = c('si1', 'si2', 'si3'))
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe)
sel_mpl <- bruteforce(held, fs, 3, repeated.measures = repe, software = 'Mplus')
crossvalidate(sel_lav)
crossvalidate(sel_mpl)
crossvalidate(sel_lav, held)
crossvalidate(sel_mpl, held)
tmp <- crossvalidate(sel_mpl, held)
class(tmp[[2]])
class(tmp[[2]][[1]])
tmp <- crossvalidate(sel_lav, held)
class(tmp[[2]][[1]])
names(fairplayer)[83:92]
names(fairplayer)
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102],
tsi1 = names(fairplayer)[113:122],
tsi2 = names(fairplayer)[123:132])
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102],
tsi1 = names(fairplayer)[113:122],
tsi2 = names(fairplayer)[123:132])
repe <- list(s = c('ssi1', 'ssi2'), t = c('tsi1', 'tsi2'))
mtmm <- list(si1 = c('ssi1', 'tsi1'), si2 = c('ssi2', 'tsi2'))
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe)
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm)
crossvalidate(sel_lav, held)
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm, grouping = 'g')
fairplayer$g <- sample(c('A', 'B'), nrow(fairplayer), TRUE)
held <- holdout(fairplayer)
held <- holdout(fairplayer, grouping = 'g')
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm, grouping = 'g')
crossvalidate(sel_lav, held)
sel_lav$final
sel_lav$call
sel_lav$call$grouping
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm, grouping = 'g')
load_all('~/stuart/stuart')
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm, grouping = 'g')
repe <- list(s = c('ssi1', 'ssi2'))
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102])
repe <- list(s = c('ssi1', 'ssi2'))
held <- holdout(fairplayer, grouping = 'g')
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, mtmm = mtmm, grouping = 'g')
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe, grouping = 'g')
crossvalidate(sel_lav, held)
load_all('~/stuart/stuart')
crossvalidate(sel_lav, held)
rm(list=ls())
library(devtools)
library(roxygen2)
setwd('~/stuart')
load_all('./stuart')
load('./stuart/data/fairplayer.rda')
load('./stuart/data/sups.rda')
# Generate documentation after changes in files
devtools::document('./stuart')
# Check package
check('./stuart')
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
sel
sel
half1
debug(crossvalidate.lavaan)
# Validation
crossvalidate(sel, half1, half2)
all.data
load_all('~/stuart/stuart')
load_all('~/stuart/stuart')
data(fairplayer)
set.seed(35355)
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102])
repe <- list(s = c('ssi1', 'ssi2'))
sel_lav <- bruteforce(held, fs, 3, repeated.measures = repe)
hal1 <- fairplayer[1:(nrow(fairplayer)/2), ]
hal1 <- fairplayer[1:(nrow(fairplayer)/2), ]
hal2 <- fairplayer[(nrow(fairplayer)/2+1):nrow(fairplayer), ]
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102])
repe <- list(s = c('ssi1', 'ssi2'))
sel_lav <- bruteforce(hal, fs, 3, repeated.measures = repe)
sel_lav <- bruteforce(hal1, fs, 3, repeated.measures = repe)
crossvalidate(sel_lav, held)
crossvalidate(sel_lav, hal1, hal2)
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus')
crossvalidate(sel_mpl, hal1, hal2)
crossvalidate(sel_mpl, hal1, hal2)
full.data
grouping
crossvalidate(sel_mpl, hal1, hal2)
crossvalidate(sel_mpl, hal1, hal2)
model.data
grouping
model.data
crossvalidate(sel_mpl, hal1, hal2)
full.data
selection$parameters
?selection
selection$subtests
model.data <- model.data[,unlist(selection$subtests)]
model.data <- full.data[,unlist(selection$subtests)]
(!is.null(grouping))
model.data$group <- data[,grouping]
auxi
model.data <- full.data[,unlist(selection$subtests)]
if (!is.null(grouping)) model.data$group <- full.data[,grouping]
model.data <- data.frame(lapply(model.data, as.numeric))
load_all('~/stuart/stuart')
crossvalidate(sel_mpl, hal1, hal2)
crossvalidate(sel_mpl, hal1, hal2)
model.data
analysis.options$model
grouping
model.data
model.data
cat(input)
load_all('~/stuart/stuart')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus')
crossvalidate(sel_mpl, hal1, hal2)
fairplayer$g <- sample(c('A', 'B'), nrow(fairplayer), TRUE)
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus')
summary(sel_mpl)
lavaan::summary(sel_mpl$final)
(sel_mpl$final)
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
hal1
hal1 <- fairplayer[1:(nrow(fairplayer)/2), ]
hal2 <- fairplayer[(nrow(fairplayer)/2+1):nrow(fairplayer), ]
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
cat(input)
model.data
fairplayer$g <- sample(c(1, 2), nrow(fairplayer), TRUE)
fairplayer$g <- sample(c(1, 2), nrow(fairplayer), TRUE)
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
fairplayer$g <- sample(c(1, 2), nrow(fairplayer), TRUE)
held <- holdout(fairplayer)
hal1 <- fairplayer[1:(nrow(fairplayer)/2), ]
hal2 <- fairplayer[(nrow(fairplayer)/2+1):nrow(fairplayer), ]
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
psi
psi
psi
psi
esit
esti
MplusOut$warnings
MplusOut$errors
exclusion
(length(MplusOut$errors) > 0)
#import Mplus output
MplusOut <- try(suppressWarnings(MplusAutomation::readModels(paste0(filename, '.out'))), silent = TRUE)
exclusion <- FALSE
(length(MplusOut$errors) > 0) exclusion <- TRUE
exclusion
MplusOut$errors
length(MplusOut$errors)>0
(length(MplusOut$errors) > 0)
exclusion <- TRUE
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
load_all('~/stuart/stuart')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
exclusion
MplusOut$errors
load_all('~/stuart/stuart')
sel_mpl <- bruteforce(hal1, fs, 3, repeated.measures = repe, software = 'Mplus', grouping = 'g')
sel_mpl$log
crossvalidate(sel_mpl, hal1, hal2)
library(devtools)
library(roxygen2)
setwd('~/stuart')
load_all('./stuart')
load('./stuart/data/fairplayer.rda')
load('./stuart/data/sups.rda')
# Generate documentation after changes in files
devtools::document('./stuart')
# Check package
check('./stuart')
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
sel
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
par_constraints
pars
equal_labels
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
pars
pars
equal_labels
lapply(equal_labels, function(x) x[-1])
length(unlist(lapply(equal_labels, function(x) x[-1])))
pars <- rbind(pars, par_constraints)
pars
data(fairplayer)
held <- holdout(fairplayer)
hal1 <- fairplayer[1:(nrow(fairplayer)/2), ]
hal2 <- fairplayer[(nrow(fairplayer)/2+1):nrow(fairplayer), ]
sel_lav <- bruteforce(hal1, fs, 3, repeated.measures = repe)
fs <- list(ssi1 = names(fairplayer)[83:92],
ssi2 = names(fairplayer)[93:102])
repe <- list(s = c('ssi1', 'ssi2'))
sel_lav <- bruteforce(hal1, fs, 3, repeated.measures = repe)
crossvalidate(sel_lav, hal1, hal2)
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
load_all('~/stuart/stuart')
data(fairplayer)
half1 <- fairplayer[1:72,]
half2 <- fairplayer[73:143,]
# Simple example from bruteforce
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(half1, fs, 3,
cores = 1)  # number of cores set to 1
# Validation
crossvalidate(sel, half1, half2)
library(devtools)
library(roxygen2)
setwd('~/stuart')
load_all('./stuart')
load('./stuart/data/fairplayer.rda')
load('./stuart/data/sups.rda')
# Generate documentation after changes in files
devtools::document('./stuart')
# Check package
check('./stuart')
library(devtools)
library(roxygen2)
setwd('~/stuart')
load_all('./stuart')
load('./stuart/data/fairplayer.rda')
load('./stuart/data/sups.rda')
# Generate documentation after changes in files
devtools::document('./stuart')
library(devtools)
library(roxygen2)
setwd('~/stuart')
load_all('./stuart')
load('./stuart/data/fairplayer.rda')
load('./stuart/data/sups.rda')
# Generate documentation after changes in files
devtools::document('./stuart')
